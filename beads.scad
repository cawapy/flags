
function belarusFlagPattern() = [
"o o o o o o o o o o o o ",
" o o X o o o o o X o o X",
"o o o o o o o o o o o o ",
" o o X o o X o o X o o X",
"o o X X o o o o X X o o ",
" o o X o o X o o X o o X",
"X o X X o o o o X X o X ",
" o X X X o X o X X X o X",
"X o X X o o o o X X o X ",
" o X o X o X o X o X o X",
"o X X X X o o X X X X o ",
" o X o X o o o X o X o X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" X o X o X o X o X o X X",
"X X o o X X X X o o X X ",
" X o X o X o X o X o X X",
"X X o o X X X X o o X X ",
" X o X o X o X o X o X X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" o X o X o o o X o X o X",
"o X X X X o o X X X X o ",
" o X o X o X o X o X o X",
"X o X X o o o o X X o X ",
" o X X X o X o X X X o X",
"X o X X o o o o X X o X ",
" o o X o o X o o X o o X",
"o o X X o o o o X X o o ",
" o o X o o X o o X o o X",
"o o o o o o o o o o o o ",
" o o X o o o o o X o o X",
"o X o o X o o X o o X o ",
" o o o o o o o o o o o X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"X o X X o X X o X X o X ",
" X X o X X o X X o X X X",
"X o X X o X X o X X o X ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" o o o o o o o o o o o X",
"o X o o X o o X o o X o ",
" o o X o o o o o X o o X",
"o o o o o o o o o o o o ",
" o o X o o X o o X o o X",
"o o X X o o o o X X o o ",
" o o X o o X o o X o o X",
"X o X X o o o o X X o X ",
" o X X X o X o X X X o X",
"X o X X o o o o X X o X ",
" o X X X o X o X X X o X",
"o X X X X o o X X X X o ",
" o X X X o o o X X X o X",
"o X X X X o o X X X X o ",
" X X X X X o X X X X X X",
"o X X X X o o X X X X o ",
" X X X X X o X X X X X X",
"X X X X X X X X X X X X ",
" X X o X X o X X o X X X",
"X X o o X X X X o o X X ",
" X X o X X X X X o X X X",
"X X o o X X X X o o X X ",
" X X o o X X X o o X X X",
"X X o o X X X X o o X X ",
" X X X o X X X o X X X X",
"o X X o o X X o o X X o ",
" X X X o X X X o X X X X",
"o X X o o X X o o X X o ",
" o X o o X X X o o X o X",
"o X X o o X X o o X X o ",
" o X o o X X X o o X o X",
"X o o o X X X X o o o X ",
" o X o o X X X o o X o X",
"X o o o X X X X o o o X ",
" o o o X X o X X o o o X",
"o o o o X X X X o o o o ",
" o o o X X o X X o o o X",
"X o o X X o o X X o o X ",
" o o o X X o X X o o o X",
"X o o X X o o X X o o X ",
" X o X X o o o X X o X X",
"X o o X X o o X X o o X ",
" X o X X o X o X X o X X",
"X X X X o o o o X X X X ",
" X o X X o X o X X o X X",
"X X X X o o o o X X X X ",
" X X X o o o o o X X X X",
"o X X X o o o o X X X o ",
" X X X o X o X o X X X X",
"o X X o o o o o o X X o ",
" o X X o X o X o X X o X",
"o X X o o X X o o X X o ",
" o X X o o o o o X X o X",
"o o X o o X X o o X o o ",
" o X X o o X o o X X o X",
"o o X o o o o o o X o o ",
" o o X o o X o o X o o X",
"o o X o X o o X o X o o ",
" o o X o o X o o X o o X",// --
"o o X o X o o X o X o o ",
" o o X o o X o o X o o X",
"o o X o o o o o o X o o ",
" o X X o o X o o X X o X",
"o o X o o X X o o X o o ",
" o X X o o o o o X X o X",
"o X X o o X X o o X X o ",
" o X X o X o X o X X o X",
"o X X o o o o o o X X o ",
" X X X o X o X o X X X X",
"o X X X o o o o X X X o ",
" X X X o o o o o X X X X",
"X X X X o o o o X X X X ",
" X o X X o X o X X o X X",
"X X X X o o o o X X X X ",
" X o X X o X o X X o X X",
"X o o X X o o X X o o X ",
" X o X X o o o X X o X X",
"X o o X X o o X X o o X ",
" o o o X X o X X o o o X",
"X o o X X o o X X o o X ",
" o o o X X o X X o o o X",
"o o o o X X X X o o o o ",
" o o o X X o X X o o o X",
"X o o o X X X X o o o X ",
" o X o o X X X o o X o X",
"X o o o X X X X o o o X ",
" o X o o X X X o o X o X",
"o X X o o X X o o X X o ",
" o X o o X X X o o X o X",
"o X X o o X X o o X X o ",
" X X X o X X X o X X X X",
"o X X o o X X o o X X o ",
" X X X o X X X o X X X X",
"X X o o X X X X o o X X ",
" X X o o X X X o o X X X",
"X X o o X X X X o o X X ",
" X X o X X X X X o X X X",
"X X o o X X X X o o X X ",
" X X o X X o X X o X X X",
"X X X X X X X X X X X X ",
" X X X X X o X X X X X X",
"o X X X X o o X X X X o ",
" X X X X X o X X X X X X",
"o X X X X o o X X X X o ",
" o X X X o o o X X X o X",
"o X X X X o o X X X X o ",
" o X X X o X o X X X o X",
"X o X X o o o o X X o X ",
" o X X X o X o X X X o X",
"X o X X o o o o X X o X ",
" o o X o o X o o X o o X",
"o o X X o o o o X X o o ",
" o o X o o X o o X o o X",
"o o o o o o o o o o o o ",
" o o X o o o o o X o o X",
"o X o o X o o X o o X o ",
" o o o o o o o o o o o X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"X o X X o X X o X X o X ",
" X X o X X o X X o X X X",
"X o X X o X X o X X o X ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" o o o o o o o o o o o X",
"o X o o X o o X o o X o ",
" o o X o o o o o X o o X",
"o o o o o o o o o o o o ",
" o o X o o X o o X o o X",
"o o X X o o o o X X o o ",
" o o X o o X o o X o o X",
"X o X X o o o o X X o X ",
" o X X X o X o X X X o X",
"X o X X o o o o X X o X ",
" o X o X o X o X o X o X",
"o X X X X o o X X X X o ",
" o X o X o o o X o X o X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" X o X o X o X o X o X X",
"X X o o X X X X o o X X ",
" X o X o X o X o X o X X",
"X X o o X X X X o o X X ",
" X o X o X o X o X o X X",
"o X o o X o o X o o X o ",
" X X o X X o X X o X X X",
"o X o o X o o X o o X o ",
" o X o X o o o X o X o X",
"o X X X X o o X X X X o ",
" o X o X o X o X o X o X",
"X o X X o o o o X X o X ",
" o X X X o X o X X X o X",
"X o X X o o o o X X o X ",
" o o X o o X o o X o o X",
"o o X X o o o o X X o o ",
" o o X o o X o o X o o X",
"o o o o o o o o o o o o ",
" o o X o o o o o X o o X",
"o o o o o o o o o o o o ",
];

beads($fn=64);

cursorY = 65;
transparencies = [0.3, 1, 0.05];
sizes = [.9, 1.1, .6];

module beads() {
    pattern = belarusFlagPattern();
    colors = [ [1, 1, 1], [1, .3, .3] ];
    for (y = [0 : 1 : len(pattern)-1]) {
        for (x = [(even(y) ? 0 : 1) : 2 : len(pattern[0])-1]) {
            if (pattern[y][x] != " ") {
                color = (pattern[y][x] == "o") ? colors[0] : colors[1];
                modeIndex = cursorY > 1 ? ((y < cursorY) ? 0 : (y > cursorY) ? 2 : 1) :
                                           (y < cursorY) ? 1 : (y > cursorY) ? 2 : 1;
                color(color, transparencies[modeIndex]) {
                    translate([x,0.5*y,0]) rotate([0, 90, 0]) cylinder(d = sizes[modeIndex], h = sizes[modeIndex], center=true);
                }
            }
        }
    }
}

function even(n) = n % 2 == 0;
